DATA SEGMENT
BCD DW (?)
MSG1 DB 0AH,0DH,'ENTER ANY 2 DIGIT HEX NUMBER',0AH,0DH,'$'
MSG3 DB 0AH,0DH,'ANS(BCD)',0AH,0DH,'$'
DATA ENDS

STACK_SEG SEGMENT
DW 10 DUP(0)
TOP LABEL WORD
STACK_SEG ENDS

CODE SEGMENT USE16
ASSUME DS:DATA,CS:CODE,SS:STACK_SEG

START : MOV AX,DATA
	MOV DS,AX
	MOV AX,STACK_SEG
	MOV SS,AX
	LEA SP,TOP
	lea dx,msg1
	CALL USER_DISPLAY
	CALL INPUT
	MOV AL,DL
	CALL INPUT
	MOV AH,DL
	MOV CL,04H
	SHL AL,CL
	OR AL,AH
	MOV AH,00H
	CMP AL,64H
	Jb LESS_100
	MOV CL,64H
	DIV CL
	MOV CH,AH
	MOV AH,00H
	XCHG AL,CH
LESS_100:CMP AL,0AH
	Jb LESS_10
	MOV CL,0AH
	div cl
	MOV CL,04H
	SHL AL,CL
	OR AL,AH
	MOV AH,CH
LESS_10:MOV BCD,AX
	XCHG AH,AL
	LEA DX,MSG3
	CALL USER_DISPLAY
	CALL OUTPUT
	MOV AL,AH
	CALL OUTPUT
	INT 03H

	USER_DISPLAY PROC NEAR
	PUSH AX
	MOV AH,09H
	INT 21H
	POP AX
	RET
	USER_DISPLAY ENDP

	INPUT PROC NEAR
	PUSH AX
	MOV AH,01H
	INT 21H
	CALL ASCII_HEX
	MOV DL,AL
	POP AX
	RET
	INPUT ENDP

	ASCII_HEX PROC NEAR
	CMP AL,41H
	JC LESS_41
	AND AL,0FH
	ADD AL,09H
	JMP NEXT1
LESS_41:AND AL,0FH
NEXT1:  RET
	ASCII_HEX ENDP

	OUTPUT PROC NEAR
	PUSH AX
	PUSH BX
	CALL HEX_ASCII
	MOV DL,BH
	MOV AH,02H
	INT 21H
	MOV DL,BL
	MOV AH,02H
	INT 21H
	POP BX
	POP AX
	RET
	OUTPUT ENDP

	HEX_ASCII PROC NEAR
	PUSH CX
	PUSH AX
	MOV CH,02H
	MOV AH,AL
HIGHER :AND AH,0FH
	CMP AH,0AH
	JC LESS_0A
	SUB AH,09H
	OR AH,40H
	JMP CONT
LESS_0A:OR AH,30H
CONT :  DEC CH
	JZ exit
	MOV BL,AH
	MOV AH,AL
	MOV CL,04H
	SHR AH,CL
	JMP HIGHER
exit:   MOV BH,AH
	pop ax
	pop cx
	ret
	HEX_ASCII ENDP
	CODE ENDS
	END START











